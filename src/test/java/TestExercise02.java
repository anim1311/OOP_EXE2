/**
 * DO NOT EDIT THIS FILE 
 * author: Ronny Hartanto (2021)
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;

import java.io.*;

public class TestExercise02 {

   @Test
   public void test01a()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Link link = new Link();
     assertFalse(link.isInvincible());
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());
     System.setOut(originalOut);
   }
   @Test
   public void test01b()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Link link = new Link();
     assertFalse(link.isInvincible());
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());
     link.moveUp();
     link.moveRight();
     link.moveUp();
     link.moveRight();
     link.moveRight();
     link.moveUp();
     assertEquals(3, link.getX());
     assertEquals(3, link.getY());     
     link.moveDown();
     link.moveLeft();
     link.moveLeft();
     link.moveDown();
     link.moveDown();
     link.moveLeft();
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());    
     link.moveLeft();
     link.moveDown(); 
     assertEquals(-1, link.getX());
     assertEquals(-1, link.getY());    
     System.setOut(originalOut);
   }
   @Test
   public void test01c()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Link link = new Link();
     assertFalse(link.isInvincible());
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());
     link.moveUp();
     link.moveRight();
     link.moveUp();
     link.moveRight();
     link.moveRight();
     link.moveUp();
     assertEquals(3, link.getX());
     assertEquals(3, link.getY());     
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     assertTrue(link.moveUp());
     assertEquals(3, link.getX());
     assertEquals(12, link.getY());    
     assertFalse(link.moveUp());
     link.moveUp();
     link.moveUp();
     assertEquals(12, link.getY());   
     System.setOut(originalOut);
   }   
   @Test
   public void test01d()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Link link = new Link();
     assertFalse(link.isInvincible());
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());
     link.powerUp();
     assertTrue(link.isInvincible());
     link.moveUp();
     link.moveRight();
     link.moveUp();
     link.moveRight();
     assertTrue(link.isInvincible());     
     link.moveRight();
     assertFalse(link.isInvincible());     
     link.moveUp();
     assertEquals(3, link.getX());
     assertEquals(3, link.getY());     
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     assertTrue(link.moveUp());
     assertEquals(3, link.getX());
     assertEquals(12, link.getY());    
     assertFalse(link.moveUp());
     link.moveUp();
     link.moveUp();
     assertEquals(12, link.getY());   
     System.setOut(originalOut);
   }   
   @Test
   public void test01e()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Link link = new Link();
     assertFalse(link.isInvincible());
     assertEquals(0, link.getX());
     assertEquals(0, link.getY());
     link.powerUp();
     assertTrue(link.isInvincible());
     link.moveUp();
     link.moveRight();
     link.moveUp();
     link.moveRight();
     assertTrue(link.isInvincible());     
     link.moveRight();
     assertFalse(link.isInvincible());   
     link.moveUp();
     assertEquals(3, link.getX());
     assertEquals(3, link.getY());     
     link.moveRight();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.moveUp();
     link.powerUp();  
     link.moveUp();
     link.moveUp();
     assertTrue(link.moveUp());
     assertEquals(4, link.getX());
     assertEquals(12, link.getY());    
     assertFalse(link.moveUp());
     link.moveUp();
     assertTrue(link.isInvincible());     
     link.moveUp();
     assertTrue(link.isInvincible());  
     assertEquals(12, link.getY());  
     link.moveDown();
     link.moveDown();
     link.moveDown();
     link.moveDown();
     link.moveDown();
     link.moveDown();
     link.moveDown();
     assertFalse(link.isInvincible());  
     System.setOut(originalOut);
   } 
   @Test
   public void test02a()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Rectangular rect1 = new Rectangular();
     assertEquals(1.0, rect1.getArea());
     assertEquals(4.0, rect1.getPerimeter());
     Rectangular rect2 = new Rectangular(10.0,5);
     assertEquals(50.0, rect2.getArea());
     assertEquals(30.0, rect2.getPerimeter());
     System.setOut(originalOut);
   }  
   @Test
   public void test02b()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Rectangular rect1 = new Rectangular();
     assertEquals(1.0, rect1.getArea());
     assertEquals(4.0, rect1.getPerimeter());
     Rectangular rect2 = new Rectangular(10.0,5);
     assertEquals(50.0, rect2.getArea());
     assertEquals(30.0, rect2.getPerimeter());
     Rectangular rect3 = new Rectangular(-10.0,5.0);
     assertEquals(1.0, rect3.getArea());
     assertEquals(4.0, rect3.getPerimeter());
     System.setOut(originalOut);
   }  
   @Test
   public void test02c()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Rectangular rect1 = new Rectangular();
     assertEquals(1.0, rect1.getArea());
     assertEquals(4.0, rect1.getPerimeter());
     assertTrue(rect1.isSquare());
     Rectangular rect2 = new Rectangular(10.0,5);
     assertEquals(50.0, rect2.getArea());
     assertEquals(30.0, rect2.getPerimeter());
     assertFalse(rect2.isSquare());
     Rectangular rect3 = new Rectangular(-10.0,5.0);
     assertEquals(1.0, rect3.getArea());
     assertEquals(4.0, rect3.getPerimeter());
     assertTrue(rect3.isSquare());     
     System.setOut(originalOut);
   } 
}
